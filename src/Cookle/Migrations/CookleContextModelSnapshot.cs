// <auto-generated />
using System;
using Cookle.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cookle.Migrations
{
    [DbContext(typeof(CookleContext))]
    partial class CookleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cookle.Models.Frigorifico", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IngredienteId");

                    b.Property<DateTime>("Data");

                    b.Property<int>("Quantidade");

                    b.HasKey("UserId", "IngredienteId");

                    b.HasAlternateKey("IngredienteId", "UserId");

                    b.ToTable("Frigorifico");
                });

            modelBuilder.Entity("Cookle.Models.Historico", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReceitaId");

                    b.Property<int>("Numero");

                    b.Property<int?>("ReceitaId1");

                    b.Property<DateTime>("UltimaVez");

                    b.HasKey("UserId", "ReceitaId");

                    b.HasAlternateKey("ReceitaId", "UserId");

                    b.HasIndex("ReceitaId1");

                    b.ToTable("Historico");
                });

            modelBuilder.Entity("Cookle.Models.Ingrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Ingrediente");
                });

            modelBuilder.Entity("Cookle.Models.IngredienteReceita", b =>
                {
                    b.Property<int>("IngredienteId");

                    b.Property<int>("ReceitaId");

                    b.Property<int?>("IngredienteId1");

                    b.Property<float>("Quantidade");

                    b.Property<int>("Unidade");

                    b.HasKey("IngredienteId", "ReceitaId");

                    b.HasIndex("IngredienteId1");

                    b.HasIndex("ReceitaId");

                    b.ToTable("IngredienteReceita");
                });

            modelBuilder.Entity("Cookle.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ReceitaId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UserId");

                    b.ToTable("Nota");
                });

            modelBuilder.Entity("Cookle.Models.Nutriente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("Unidade")
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.ToTable("Nutriente");
                });

            modelBuilder.Entity("Cookle.Models.NutrienteReceita", b =>
                {
                    b.Property<int>("NutrienteId");

                    b.Property<int>("ReceitaId");

                    b.Property<int?>("NutrienteId1");

                    b.Property<float>("Quantidade");

                    b.HasKey("NutrienteId", "ReceitaId");

                    b.HasIndex("NutrienteId1");

                    b.HasIndex("ReceitaId");

                    b.ToTable("NutrienteReceita");
                });

            modelBuilder.Entity("Cookle.Models.Passo", b =>
                {
                    b.Property<int>("Numero");

                    b.Property<int>("ReceitaId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int?>("SubReceitaId");

                    b.HasKey("Numero", "ReceitaId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("SubReceitaId");

                    b.ToTable("Passo");
                });

            modelBuilder.Entity("Cookle.Models.Plano", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReceitaId");

                    b.HasKey("UserId", "ReceitaId");

                    b.HasAlternateKey("ReceitaId", "UserId");

                    b.ToTable("Plano");
                });

            modelBuilder.Entity("Cookle.Models.PreferenciaIngrediente", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IngredienteId");

                    b.Property<int>("Tipo");

                    b.HasKey("UserId", "IngredienteId");

                    b.HasAlternateKey("IngredienteId", "UserId");

                    b.ToTable("PreferenciaIngrediente");
                });

            modelBuilder.Entity("Cookle.Models.Receita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("Dificuldade");

                    b.Property<string>("Imagem")
                        .HasMaxLength(45);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int?>("NumPessoas");

                    b.Property<int?>("TempoPrep");

                    b.Property<int?>("Tipo");

                    b.Property<string>("Video")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Receita");
                });

            modelBuilder.Entity("Cookle.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Sexo");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<bool>("Voz");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cookle.Models.Frigorifico", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("Frigorificos")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Frigorificos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Historico", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Historicos")
                        .HasForeignKey("ReceitaId1");

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Historicos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.IngredienteReceita", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("IngredienteReceitas")
                        .HasForeignKey("IngredienteId1");

                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("IngredienteReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Nota", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Notas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Notas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.NutrienteReceita", b =>
                {
                    b.HasOne("Cookle.Models.Nutriente", "Nutriente")
                        .WithMany("NutrienteReceitas")
                        .HasForeignKey("NutrienteId1");

                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("NutrienteReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Passo", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Passos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.Receita", "SubReceita")
                        .WithMany("SubReceitas")
                        .HasForeignKey("SubReceitaId");
                });

            modelBuilder.Entity("Cookle.Models.Plano", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Planos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Planos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.PreferenciaIngrediente", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("PreferenciaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("PreferenciaIngredientes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
