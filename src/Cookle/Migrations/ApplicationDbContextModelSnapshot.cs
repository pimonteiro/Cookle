// <auto-generated />
using System;
using Cookle.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cookle.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cookle.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.pt",
                            Name = "Admin",
                            Password = "admin123"
                        });
                });

            modelBuilder.Entity("Cookle.Models.Frigorifico", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IngredienteId");

                    b.Property<DateTime>("Data");

                    b.Property<int?>("IngredienteId1");

                    b.Property<int>("Quantidade");

                    b.HasKey("UserId", "IngredienteId");

                    b.HasAlternateKey("IngredienteId", "UserId");

                    b.HasIndex("IngredienteId1");

                    b.ToTable("Frigorifico");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IngredienteId = 1,
                            Data = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantidade = 3
                        });
                });

            modelBuilder.Entity("Cookle.Models.Historico", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReceitaId");

                    b.Property<int>("Numero");

                    b.Property<DateTime>("UltimaVez");

                    b.HasKey("UserId", "ReceitaId");

                    b.HasAlternateKey("ReceitaId", "UserId");

                    b.ToTable("Historico");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ReceitaId = 1,
                            Numero = 1,
                            UltimaVez = new DateTime(2019, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cookle.Models.Ingrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Ingrediente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "ovos"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "manteiga"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "iogurte natural"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "açúcar"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "óleo"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "fermento em pó"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "farinha"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "açúcar em pó"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "farinha de trigo"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "leite"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "sal"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "oleo vegetal"
                        });
                });

            modelBuilder.Entity("Cookle.Models.IngredienteReceita", b =>
                {
                    b.Property<int>("IngredienteId");

                    b.Property<int>("ReceitaId");

                    b.Property<float>("Quantidade");

                    b.Property<int>("Unidade");

                    b.HasKey("IngredienteId", "ReceitaId");

                    b.HasIndex("ReceitaId");

                    b.ToTable("IngredienteReceita");

                    b.HasData(
                        new
                        {
                            IngredienteId = 1,
                            ReceitaId = 1,
                            Quantidade = 4f,
                            Unidade = 0
                        },
                        new
                        {
                            IngredienteId = 1,
                            ReceitaId = 2,
                            Quantidade = 2f,
                            Unidade = 0
                        },
                        new
                        {
                            IngredienteId = 2,
                            ReceitaId = 1,
                            Quantidade = 1f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 3,
                            ReceitaId = 1,
                            Quantidade = 1f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 4,
                            ReceitaId = 1,
                            Quantidade = 3f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 5,
                            ReceitaId = 1,
                            Quantidade = 0.25f,
                            Unidade = 2
                        },
                        new
                        {
                            IngredienteId = 6,
                            ReceitaId = 1,
                            Quantidade = 2f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 7,
                            ReceitaId = 1,
                            Quantidade = 2f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 8,
                            ReceitaId = 1,
                            Quantidade = 2f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 1,
                            ReceitaId = 3,
                            Quantidade = 1f,
                            Unidade = 0
                        },
                        new
                        {
                            IngredienteId = 9,
                            ReceitaId = 3,
                            Quantidade = 1f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 10,
                            ReceitaId = 3,
                            Quantidade = 1f,
                            Unidade = 2
                        },
                        new
                        {
                            IngredienteId = 11,
                            ReceitaId = 3,
                            Quantidade = 2f,
                            Unidade = 1
                        },
                        new
                        {
                            IngredienteId = 12,
                            ReceitaId = 3,
                            Quantidade = 1.5f,
                            Unidade = 1
                        });
                });

            modelBuilder.Entity("Cookle.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ReceitaId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("UserId");

                    b.ToTable("Nota");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Acrescentar mais açucar na próxima confeção.",
                            ReceitaId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Cookle.Models.Nutriente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("Unidade")
                        .HasMaxLength(2147483647);

                    b.HasKey("Id");

                    b.ToTable("Nutriente");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Proteína",
                            Unidade = 1
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Hidratos de carbono",
                            Unidade = 0
                        });
                });

            modelBuilder.Entity("Cookle.Models.NutrienteReceita", b =>
                {
                    b.Property<int>("NutrienteId");

                    b.Property<int>("ReceitaId");

                    b.Property<int?>("NutrienteId1");

                    b.Property<float>("Quantidade");

                    b.HasKey("NutrienteId", "ReceitaId");

                    b.HasIndex("NutrienteId1");

                    b.HasIndex("ReceitaId");

                    b.ToTable("NutrienteReceita");

                    b.HasData(
                        new
                        {
                            NutrienteId = 1,
                            ReceitaId = 1,
                            Quantidade = 3f
                        },
                        new
                        {
                            NutrienteId = 2,
                            ReceitaId = 1,
                            Quantidade = 5f
                        },
                        new
                        {
                            NutrienteId = 2,
                            ReceitaId = 3,
                            Quantidade = 60.3f
                        },
                        new
                        {
                            NutrienteId = 1,
                            ReceitaId = 3,
                            Quantidade = 3f
                        });
                });

            modelBuilder.Entity("Cookle.Models.Passo", b =>
                {
                    b.Property<int>("Numero");

                    b.Property<int>("ReceitaId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("SubReceitaId");

                    b.HasKey("Numero", "ReceitaId");

                    b.HasIndex("ReceitaId");

                    b.HasIndex("SubReceitaId");

                    b.ToTable("Passo");

                    b.HasData(
                        new
                        {
                            Numero = 1,
                            ReceitaId = 1,
                            Descricao = "Pre-aqueça o forno a 180º C."
                        },
                        new
                        {
                            Numero = 2,
                            ReceitaId = 1,
                            Descricao = "Unte uma forma de chaminé com manteiga e reserve."
                        },
                        new
                        {
                            Numero = 3,
                            ReceitaId = 1,
                            Descricao = "Bata as claras em castelo e reserve numa taça.",
                            SubReceitaId = 2
                        },
                        new
                        {
                            Numero = 4,
                            ReceitaId = 1,
                            Descricao = "Numa taça, adicione o iogurte e as gemas de ovo. Utilize a medida do copo de iogurte e adicione o açúcar, o óleo, a farinha e o fermento."
                        },
                        new
                        {
                            Numero = 5,
                            ReceitaId = 1,
                            Descricao = "Junte as claras e bata com uma batedeira até a massa estar homogénea."
                        },
                        new
                        {
                            Numero = 6,
                            ReceitaId = 1,
                            Descricao = "Deite a massa na forma de chaminé, previamente untada, e leve ao forno durante 40 a 45 minutos, ou espete um palito na massa e verifique se sai limpo."
                        },
                        new
                        {
                            Numero = 7,
                            ReceitaId = 1,
                            Descricao = " Retire do forno e deixe arrefecer ligeiramente antes de desenformar. Antes de servir, polvilhe com o açúcar em pó."
                        },
                        new
                        {
                            Numero = 1,
                            ReceitaId = 2,
                            Descricao = "Separe as claras das gemas."
                        },
                        new
                        {
                            Numero = 2,
                            ReceitaId = 2,
                            Descricao = "Coloque-as no copo da batedeira."
                        },
                        new
                        {
                            Numero = 3,
                            ReceitaId = 2,
                            Descricao = "Bata em velocidade mínima durante 7 minutos.",
                            SubReceitaId = 2
                        },
                        new
                        {
                            Numero = 4,
                            ReceitaId = 2,
                            Descricao = "Caso seja necessário, bata mais 3 minutos até obter a consistência de neve."
                        },
                        new
                        {
                            Numero = 5,
                            ReceitaId = 2,
                            Descricao = "Para verificar se as claras estão no ponto, vire o recipiente ao contrário e, se permanecerem no fundo, sem cair, estão perfeitas."
                        },
                        new
                        {
                            Numero = 1,
                            ReceitaId = 3,
                            Descricao = "Bata todos os ingredientes no liquidificador até obter uma consistência cremosa."
                        },
                        new
                        {
                            Numero = 2,
                            ReceitaId = 3,
                            Descricao = "Unte uma frigideira com óleo e despeje uma concha de massa."
                        },
                        new
                        {
                            Numero = 3,
                            ReceitaId = 3,
                            Descricao = "Faça movimentos circulares para que a massa se espalhe por toda a frigideira."
                        },
                        new
                        {
                            Numero = 4,
                            ReceitaId = 3,
                            Descricao = "Espere até a massa se soltar do fundo, vire e deixe fritar do outro lado."
                        },
                        new
                        {
                            Numero = 5,
                            ReceitaId = 3,
                            Descricao = "Acrescente o recheio de sua preferência, enrole e está pronta para servir."
                        });
                });

            modelBuilder.Entity("Cookle.Models.Plano", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ReceitaId");

                    b.HasKey("UserId", "ReceitaId");

                    b.HasAlternateKey("ReceitaId", "UserId");

                    b.ToTable("Plano");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ReceitaId = 1
                        });
                });

            modelBuilder.Entity("Cookle.Models.PreferenciaIngrediente", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("IngredienteId");

                    b.Property<int>("Tipo");

                    b.HasKey("UserId", "IngredienteId");

                    b.HasAlternateKey("IngredienteId", "UserId");

                    b.ToTable("PreferenciaIngrediente");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            IngredienteId = 1,
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("Cookle.Models.Receita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("Dificuldade");

                    b.Property<string>("Imagem")
                        .HasMaxLength(500);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("NumPessoas");

                    b.Property<int?>("TempoPrep");

                    b.Property<int?>("Tipo");

                    b.Property<string>("Video")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Receita");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Um dos bolos mais fáceis e saborosos.",
                            Dificuldade = 2,
                            Imagem = "https://www.pingodoce.pt/wp-content/uploads/2016/03/comofazerbolodeiogurte617.jpg",
                            Nome = "Bolo de iogurte",
                            NumPessoas = 10,
                            TempoPrep = 55
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "A forma mais fácil de bater claras em castelo, para que os seus bolos fiquem perfeitos.",
                            Dificuldade = 1,
                            Imagem = "https://i1.wp.com/www.docesregionais.com/wp-content/uploads/2013/02/Como-Bater-Claras-em-NeveCastelo.jpg",
                            Nome = "Claras em Castelo"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Uma massa simples mas deliciosa.",
                            Dificuldade = 1,
                            Nome = "Massa de panquecas simples",
                            NumPessoas = 2,
                            TempoPrep = 15
                        });
                });

            modelBuilder.Entity("Cookle.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("Sexo");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<bool>("Voz");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e35f6da-236d-4d27-af5a-24b88c072799",
                            DataNascimento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@GMAIL.COM",
                            NormalizedUserName = "TEST",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXE74M7Y0V/YP1TPuLJuZ7gNZ8zFbyzIb1nUzrb5dpVWgOWqaH0YZDipbF3PO2Rng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sexo = 0,
                            TwoFactorEnabled = false,
                            UserName = "Test",
                            Voz = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Cookle.Models.Frigorifico", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("Frigorificos")
                        .HasForeignKey("IngredienteId1");

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Frigorificos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Historico", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Historicos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Historicos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.IngredienteReceita", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("IngredienteReceitas")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("IngredienteReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Nota", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Notas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Notas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.NutrienteReceita", b =>
                {
                    b.HasOne("Cookle.Models.Nutriente", "Nutriente")
                        .WithMany("NutrienteReceitas")
                        .HasForeignKey("NutrienteId1");

                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("NutrienteReceitas")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.Passo", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Passos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.Receita", "SubReceita")
                        .WithMany("SubReceitas")
                        .HasForeignKey("SubReceitaId");
                });

            modelBuilder.Entity("Cookle.Models.Plano", b =>
                {
                    b.HasOne("Cookle.Models.Receita", "Receita")
                        .WithMany("Planos")
                        .HasForeignKey("ReceitaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("Planos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Cookle.Models.PreferenciaIngrediente", b =>
                {
                    b.HasOne("Cookle.Models.Ingrediente", "Ingrediente")
                        .WithMany("PreferenciaIngredientes")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User", "User")
                        .WithMany("PreferenciaIngredientes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Cookle.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Cookle.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cookle.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Cookle.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
